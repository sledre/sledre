from hashlib import sha256, md5, sha512
from textwrap import wrap

from django.db import models
from django_fsm import FSMField, transition

MALWARE_DIR = "malwares"


def get_upload_filename(instance, filename):
    dirs = wrap(instance.sha256, 2)
    return MALWARE_DIR + '/' + '/'.join(dirs[:5]) + '/' + instance.sha256


class MalwareState(object):
    NOT_ANALYZED = "NOT_ANALYZED"
    ANALYZING = "ANALYZING"
    ANALYZED = "ANALYZED"


class Malware(models.Model):
    md5 = models.CharField(max_length=33, editable=False)
    sha256 = models.CharField(max_length=65, primary_key=True, editable=False)
    sha512 = models.CharField(max_length=129, editable=False)
    # Status -> ("Not Analyzed", "Analyzing", "Analyzed")
    state = FSMField(default=MalwareState.NOT_ANALYZED, editable=False,
                     protected=True)
    hooks_result = models.JSONField(default=list, editable=False)
    file = models.FileField(upload_to=get_upload_filename)
    content_type = models.CharField(default="application/octet-stream",
                                    max_length=100, editable=False)
    date = models.DateTimeField(auto_now_add=True, editable=False)

    @transition(field=state, source=MalwareState.NOT_ANALYZED,
                target=MalwareState.ANALYZING)
    def analyze(self):
        pass

    @transition(field=state, source=MalwareState.ANALYZING,
                target=MalwareState.ANALYZED)
    def end_analysis(self, hooks_result):
        self.hooks_result = hooks_result

    def save(self, *args, **kwargs):
        # If it's a creation rather than an update, we compute the hashes
        if self._state.adding is True:
            file_content = self.file.read()

            self.content_type = self.file.file.content_type
            self.sha256 = sha256(file_content).hexdigest()
            self.sha512 = sha512(file_content).hexdigest()
            self.md5 = md5(file_content).hexdigest()

        super().save(*args, **kwargs)
