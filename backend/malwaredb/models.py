from hashlib import sha256, md5, sha512
from textwrap import wrap

from django.utils import timezone
from django.db import models
from django_fsm import FSMField, transition, RETURN_VALUE
from django.contrib.postgres.fields import ArrayField


MALWARE_DIR = "/data/malwares"


def get_upload_filename(instance, filename):
    dirs = wrap(instance.sha256, 2)
    return MALWARE_DIR + "/" + "/".join(dirs[:5]) + "/" + instance.sha256


class MalwareState(object):
    NOT_STARTED = "NOT_STARTED"
    STARTING_QEMU = "STARTING_QEMU"
    DOWNLOADING_MALWARE = "DOWNLOADING_MALWARE"
    STARTING_AGENT = "STARTING_AGENT"
    SENDING_RESULTS = "SENDING_RESULTS"
    TASK_OVER = "TASK_OVER"
    TIMED_OUT = "TIMED_OUT"


class Malware(models.Model):
    name = models.CharField(max_length=128, default="")
    md5 = models.CharField(max_length=33, editable=False)
    sha256 = models.CharField(max_length=65, primary_key=True, editable=False)
    sha512 = models.CharField(max_length=129, editable=False)

    state = FSMField(default=MalwareState.NOT_STARTED, editable=False, protected=True)
    agent_result = models.FileField(default=list, editable=False)
    file = models.FileField(upload_to=get_upload_filename)
    content_type = models.CharField(
        default="application/octet-stream", max_length=100, editable=False
    )
    time = models.IntegerField(default=30)
    creation_date = models.DateTimeField(auto_now_add=True, editable=False)
    analysis_ended_at = models.DateTimeField(default=None, null=True, editable=False)
    label = models.CharField(max_length=50, default="None")
    tags = ArrayField(models.CharField(max_length=200), default=list)
    family = models.CharField(max_length=129, editable=False, default="Unknown")
    is_dll = models.BooleanField(default=False)
    export_dll = models.CharField(max_length=100, default="")
    is_unpacking = models.BooleanField(default=False)

    @transition(
        field=state, source=MalwareState.NOT_STARTED, target=MalwareState.STARTING_QEMU
    )
    def starting_qemu(self):
        pass

    @transition(
        field=state, source=MalwareState.STARTING_QEMU, target=MalwareState.DOWNLOADING_MALWARE
    )
    def download_malware(self):
        pass

    @transition(
        field=state, source=MalwareState.NOT_STARTED, target=MalwareState.DOWNLOADING_MALWARE
    )
    def download_malware(self):
        pass

    @transition(
        field=state, source=MalwareState.DOWNLOADING_MALWARE, target=MalwareState.STARTING_AGENT
    )
    def start_agent(self):
        pass

    @transition(
        field=state, source=MalwareState.STARTING_AGENT, target=MalwareState.SENDING_RESULTS
    )
    def send_results(self):
        pass

    @transition(
        field=state,
        source=MalwareState.SENDING_RESULTS,
        target=RETURN_VALUE(MalwareState.TASK_OVER, MalwareState.TIMED_OUT),
    )
    def end_analysis(self, agent_result):
        if agent_result is None:
            return MalwareState.TIMED_OUT
        self.analysis_ended_at = timezone.now()
        self.agent_result = agent_result
        return MalwareState.TASK_OVER

    def save(self, *args, **kwargs):
        # If it's a creation rather than an update, we compute the hashes
        if self._state.adding is True:
            file_content = self.file.read()

            self.content_type = self.file.file.content_type
            self.sha256 = sha256(file_content).hexdigest()
            self.sha512 = sha512(file_content).hexdigest()
            self.md5 = md5(file_content).hexdigest()

        super().save(*args, **kwargs)
