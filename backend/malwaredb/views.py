from os import fstat
from json import dumps
from django.http import FileResponse
from rest_framework import viewsets, mixins, renderers
from rest_framework.decorators import action
from rest_framework.exceptions import ValidationError
from rest_framework.generics import get_object_or_404
from rest_framework.views import APIView
from rest_framework.response import Response

from malwaredb.models import Malware, MalwareState
from malwaredb.serializers import MalwareSerializer
from malwaredb.tasks import generate_dataset


class PassRenderer(renderers.BaseRenderer):
    """
    Return data as-is. View should supply a Response.
    """

    media_type = ""
    format = ""

    def render(self, data, accepted_media_type=None, renderer_context=None):
        return data


class MalwareViewSet(
    mixins.CreateModelMixin,
    mixins.ListModelMixin,
    mixins.RetrieveModelMixin,
    mixins.DestroyModelMixin,
    viewsets.GenericViewSet,
):
    queryset = Malware.objects.all()
    serializer_class = MalwareSerializer

    def perform_destroy(self, instance):
        if instance.state == MalwareState.ANALYZING:
            raise ValidationError("You can't delete a malware in this state")
        instance.delete()

    @action(detail=True, methods=["get"], renderer_classes=(PassRenderer,))
    def download(self, request, pk=None):
        malware = get_object_or_404(Malware, pk=pk)

        file_handle = malware.file.open()

        response = FileResponse(file_handle, content_type=malware.content_type)
        response["Content-Length"] = malware.file.size
        response["Content-Disposition"] = 'attachment; filename="%s"' % malware.sha256

        return response

    @action(detail=True, methods=["GET"], renderer_classes=(PassRenderer,))
    def download_traces(self, request, pk=None):
        malware = get_object_or_404(Malware, pk=pk)

        output = malware.agent_result

        extension = "json"
        if malware.is_unpacking:
            extension = "zip"

        response = FileResponse(output, content_type="text/plain")
        response["Content-Length"] = len(output)
        response["Content-Disposition"] = (
                'attachment; filename="%s.%s"' % (malware.sha256, extension)
        )
        return response


class DatasetGenerationView(APIView):
    def get(self, request, pk=None):
        task_id = generate_dataset.delay()
        return Response({"task_id": task_id.__str__()})


class DatasetCheckView(APIView):
    def get(self, request, pk=None):
        if pk is None:
            return Response({"status": "KO", "error": "Please specify a task id."})
        path = "/data/datasets/" + pk + ".zip"
        try:
            fd = open(path, "rb")
        except:
            return Response(
                {
                    "status": "KO",
                    "error": "Dataset does not exist or is not yet generated.",
                }
            )
        return Response({"status": "OK"})


class DatasetDownloadView(APIView):
    def get(self, request, pk=None):
        if pk is None:
            return Response({"error": "Please specify a task id."})
        path = "/data/datasets/" + pk + ".zip"
        try:
            fd = open(path, "rb")
        except:
            return Response(
                {"error": "Dataset does not exist or is not yet generated."}
            )

        response = FileResponse(fd, content_type="application/zip")
        response["Content-Disposition"] = 'attachment; filename="dataset.zip"'

        return response
