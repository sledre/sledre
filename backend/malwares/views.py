from os import fstat
from json import dumps
from django.http import FileResponse
from rest_framework import viewsets, mixins, renderers
from rest_framework.decorators import action
from rest_framework.exceptions import ValidationError
from rest_framework.generics import get_object_or_404
from rest_framework.views import APIView
from rest_framework.response import Response

from malwares.models import Malware
from malwares.serializers import MalwareSerializer

from jobs.models import Job, JobState

class PassRenderer(renderers.BaseRenderer):
    """
    Return data as-is. View should supply a Response.
    """

    media_type = ""
    format = ""

    def render(self, data, accepted_media_type=None, renderer_context=None):
        return data


class MalwareViewSet(
    mixins.CreateModelMixin,
    mixins.ListModelMixin,
    mixins.RetrieveModelMixin,
    mixins.DestroyModelMixin,
    viewsets.GenericViewSet,
):
    queryset = Malware.objects.all()
    serializer_class = MalwareSerializer

    def perform_destroy(self, instance):
        running_jobs = instance.jobs.filter(state=JobState.RUNNING)
        if running_jobs.exists():
            raise ValidationError("You can't delete a malware in this state")
        instance.delete()

    @action(detail=True, methods=["get"], renderer_classes=(PassRenderer,))
    def download(self, request, pk=None):
        malware = get_object_or_404(Malware, pk=pk)

        file_handle = malware.file.open()

        response = FileResponse(file_handle, content_type="application/octet-stream")
        response["Content-Length"] = malware.file.size
        response["Content-Disposition"] = 'attachment; filename="%s"' % malware.sha256

        return response
